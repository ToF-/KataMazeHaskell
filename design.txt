

Dijkstra

initialize all node with distance = infinity
change node source: distance = (0,source) (itself)

while priority queue is not empty
    extract (_node_,(_dist_,_via_)) from the priority queue 
    _node_ is the node with shortest distance to source
    insert (_node_,(_distance_ , _via_)) in the result list
    delete _node_ from the priority queue

    for all edges (_neighbor_,_label_) going from _node_
        (_distance_,_via_) = find key _neighbor_ in the priority queue
        if _distance_ + _label_ < _distance_ then
            update priority (_distance_ + _label_, _node_) for key _neighbor_ in the priority queue

 



1. read the maze specification from standard input
    # is a wall
    . is a free space
    A is starting point (on a border)
    B is ending point   (on a border)
2. transpose the maze into a graph
3. solve the maze: shortest path from A to B, using Djikstra Algorithm
3.1 initialize a partially ordered tree (POT) with each node: key = node, distance_from_source = Infinity
    set distance_from_source of source to 0 
    update map of distances with source, distance_from_source = 0, via = source itself 
    
3.2 r is settled,
    for each of the adjacent nodes of r, if distance_from_source r > distance_from_source
    update in POT all adjacent nodes of r, prio = distance from r
    extract the node s with minimal distance_from_source
    if distance_from_source r + weight r s < distance_from_source s 
    then distance_from_source s = distance_from_source r + weight r s, via = r

    
    update map of distances with s, distance of source =  
    
4. outputs the maze solved 
    o is a step in the path
5. outputs the directions from A to B:
    e.g. EEESSWSSEEEEENNEE


